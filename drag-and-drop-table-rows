<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml" class="manywho" style="height: 100%;">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
    <link rel="icon" href="https://assets.manywho.com/img/favicon.ico">
    <title>DND Table Rows</title>
    <style>
        .mw-bs .wait-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            min-height: 500px;
            z-index: 1100;
            background-color: rgba(255, 255, 255, 0.5);
        }

        .mw-bs .wait-message {
            position: relative;
            text-align: center;
            margin-top: 1em;
            display: block;
            top: 40%;
            font-size: 2em;
            padding: 0 2em;
        }

   /* Spinner */
        .mw-bs .wait-spinner {
            display: block;
            position: relative;
            left: 50%;
            width: 150px;
            height: 150px;
            margin: 200px 0 0 -75px;
            border-radius: 50%;
            -webkit-animation: spin 2s linear infinite; /* Chrome, Opera 15+, Safari 5+ */
            animation: spin 2s linear infinite; /* Chrome, Firefox 16+, IE 10+, Opera */
            transform: scale(1.75);
        }

        /* More Spinner */
        .mw-bs .wait-spinner:before {
            content: '';
            box-sizing: border-box;
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            margin-top: -10px;
            margin-left: -10px;
            border-radius: 50%;
            border: 2px solid #ccc;
            border-top-color: #333;
            animation: spinner .6s linear infinite;
        }

        @-webkit-keyframes spin {
            0%   {
                -webkit-transform: rotate(0deg);  /* Chrome, Opera 15+, Safari 3.1+ */
                -ms-transform: rotate(0deg);  /* IE 9 */
                transform: rotate(0deg);  /* Firefox 16+, IE 10+, Opera */
            }
            100% {
                -webkit-transform: rotate(360deg);  /* Chrome, Opera 15+, Safari 3.1+ */
                -ms-transform: rotate(360deg);  /* IE 9 */
                transform: rotate(360deg);  /* Firefox 16+, IE 10+, Opera */
            }
        }
        @keyframes spin {
            0%   {
                -webkit-transform: rotate(0deg);  /* Chrome, Opera 15+, Safari 3.1+ */
                -ms-transform: rotate(0deg);  /* IE 9 */
                transform: rotate(0deg);  /* Firefox 16+, IE 10+, Opera */
            }
            100% {
                -webkit-transform: rotate(360deg);  /* Chrome, Opera 15+, Safari 3.1+ */
                -ms-transform: rotate(360deg);  /* IE 9 */
                transform: rotate(360deg);  /* Firefox 16+, IE 10+, Opera */
            }
        }

    

        @keyframes spinner {
          to {transform: rotate(360deg);}
        }
        @-webkit-keyframes chartjs-render-animation{from{opacity:0.99}to{opacity:1}}
        
        @keyframes chartjs-render-animation{from{opacity:0.99}to{opacity:1}}
        .chartjs-render-monitor{-webkit-animation:chartjs-render-animation 0.001s;animation:chartjs-render-animation 0.001s;}

    </style>
</head>
<body style="height: 100%;">
    <div id="manywho">
        <div id="loader" class="mw-bs" style="width: 100%; height: 100%;">
            <div class="wait-container">
                <div class="wait-spinner"></div>
            </div>
        </div>
    </div>
    <script src="https://assets.manywho.com/js/vendor/jquery-2.1.4.min.js"></script>

    <script type="text/javascript">
        var manywho = {
            cdnUrl: 'https://assets.manywho.com',
            requires: ['core', 'bootstrap3'],
            initialize: function () {

                var queryParameters = manywho.utils.parseQueryString(window.location.search.substring(1));

                manywho.settings.initialize({
                    adminTenantId: 'da497693-4d02-45db-bc08-8ea16d2ccbdf',
                    playerUrl: [ location.protocol, '//', location.host, location.pathname ].join(''),
                    joinUrl: [ location.protocol, '//', location.host, location.pathname ].join('')
                });
                
                //Inputs 
                var input1 = queryParameters['input1'] != null ? queryParameters['input1'] : 'noInput1';
                var input2 = queryParameters['input2'] != null ? queryParameters['input2'] : 'noInput2';
                var input3 = queryParameters['input3'] != null ? queryParameters['input3'] : 'noInput3';
                var input4 = queryParameters['input4'] != null ? queryParameters['input4'] : 'noInput4';
                var input5 = queryParameters['input5'] != null ? queryParameters['input5'] : 'noInput5';
                var input6 = queryParameters['input6'] != null ? queryParameters['input6'] : 'noInput6';
                var input7 = queryParameters['input7'] != null ? queryParameters['input7'] : 'noInput7';
                var inputEmail = queryParameters['inputEmail'] != null ? queryParameters['inputEmail'] : 'chriscappetta@boomi.com';
                var inputPhone = queryParameters['inputPhone'] != null ? queryParameters['inputPhone'] : '9703180975';
                var inputMode = queryParameters['inputMode'] != null ? queryParameters['inputMode'] : 'admin';
                
                var inputs = [
                    {"input1": input1},
                    {"input2": input2},
                    {"input3": input3},
                    {"input4": input4},
                    {"input5": input5},
                    {"input6": input6},
                    {"input7": input7},
                    {"inputEmail": inputEmail},
                    {"inputPhone": inputPhone},
                    {"inputMode": inputMode}
                ];
                var jsonInputs = manywho.json.generateFlowInputs(inputs);
                //End bit for inputs ^^

                var options = {
                    authentication: {
                        sessionId: queryParameters['session-token'],
                        sessionUrl: queryParameters['session-url']
                    },
                    navigationElementId: queryParameters['navigation-element-id'],
                    mode: queryParameters['mode'],
                    reportingMode: queryParameters['reporting-mode'],
                    replaceUrl: true,
                    collaboration: {
                        isEnabled: false
                    },
                    inputs: jsonInputs, // Inputs
                    annotations: null,
                    navigation: {
                        isFixed: true,
                        isWizard: false
                    },
                    callbacks: [],
                    theme: queryParameters['theme'] != null ? queryParameters['theme'] : 'readable'
                };

                var tenantId = queryParameters['tenant-id'];
                if (!tenantId) {
                    tenantId = window.location.pathname
                                .split('/')
                                .filter(function (path) {
                                    return path && path.length > 0;
                                })[0];
                }

                manywho.engine.initialize(
                    tenantId,
                    queryParameters['flow-id'],
                    queryParameters['flow-version-id'],
                    'main',
                    queryParameters['join'],
                    queryParameters['authorization'],
                    options,
                    queryParameters['initialization']
                );

            }
        };
    </script>

    <script src="https://assets.manywho.com/js/loader.min.js"></script>
    <style>
    /*Logo*/
    .mw-bs .navbar-brand {
            background: url(https://files-manywho-com.s3.amazonaws.com/10e621a2-a7e0-41fd-85d6-876e76184d6d/logo-dover_main.png);
            background-position: left center;
            background-repeat: no-repeat;
            font-size: 9px;
            font-weight: 500;
            line-height: 20px;
            width: 90px;
            height: 40px;
            margin: 10px 15px 10px 15px !important;
            padding: 0px 0px 0px 36px !important;
            font-weight: bold;
            background-size: contain;
        }
        
        .mw-bs .summary-table {
            max-width:400px;
        }
        
        .mw-bs .summary-table  td, .mw-bs .summary-table th {
            /*padding: 0;*/
            padding: 10px;
            border: 1px solid #ccc;
        }
    </style>

<!--Custom Draggable Table Rows-->
<!--Configuration: draggabletbl droppabletbl and outcom-assign classes are attached to your tables and outcomes respectively-->
<script type="text/javascript">
    function dragstart_handler(ev) {
        // Add the target element's id to the data transfer object
        ev.dataTransfer.setData("text/plain", ev.target.id);
        ev.dropEffect = "move";
        event.dataTransfer.effectAllowed = "link";
    }

    function dragover_handler(ev) {
        ev.preventDefault();
        // Set the dropEffect to move
        //ev.dataTransfer.dropEffect = "move";
        ev.dataTransfer.dropEffect = "link";
    }
   
    function drop_handler(ev) {
        ev.preventDefault();
        // Get the id of the target and add the moved element to the target's DOM
        var data = ev.dataTransfer.getData("text");
        //$(ev.target).parents("tbody").append($("#"+data));
        //$("#"+data).find("button").click();
        
        // select row
        $(ev.target).parent("tr").click();
        
        // click 'assign' outcome button of the dragged row in this case col 1
        $(".outcome-assign").click();
    }

    debugger;
    
    $(function() {
        // Handler for .ready() called.

        // Select the node that will be observed for mutations
        var targetNode = document.getElementById("manywho"); 

        // Options for the observer (which mutations to observe)
        var config = { attributes: true, childList: true, subtree: true };

        // Callback function to execute when mutations are observed
        var callback = function(mutationsList) {
            for(var mutation of mutationsList) {
                if (mutation.type == 'childList') {
                    // mutation.target.tagName === "TBODY" 
                    console.log("mutation target tag: " + mutation.target.tagName);
                    // check for dynamically added table rows
                    if ( mutation.addedNodes.length > 0 && $(mutation.target).find(".draggabletbl").length > 0 ) {
                        //$(mutation.addedNodes[0]).parents(".draggabletbl").length > 0  ) {
                    
                        var drpTblBody = $(mutation.target).find(".draggabletbl").find("tbody");
                        if (drpTblBody.length > 0 ) {

                            var drpTbRows = drpTblBody.children();
                            for (var rnum = 0; rnum < drpTbRows.length; rnum++  in drpTbRows) {
                                // only attributes to data rows not header rows..
                                if ($(drpTbRows[rnum]).children().length > 0 && $(drpTbRows[rnum]).children("td").length > 0) {

                                    $(drpTbRows[rnum]).attr("draggable", "true")
                                    $(drpTbRows[rnum]).attr("ondragstart", "dragstart_handler(event)");
                                    // make source table droppable as well for reverse test
                                    if (!drpTblBody.attr("ondrop")) {
                                        drpTblBody.attr("ondrop", "drop_handler(event);"); 
                                        drpTblBody.attr("ondragover", "dragover_handler(event)");
                                    }

                                    console.log('droptable added' + mutation.target);
                                }
                            }
                       }
                    }
                   
                    //  check for pre-initialized "droppabletbl" table rows
                    if ( mutation.addedNodes.length > 0 && $(mutation.target).find(".droppabletbl").length > 0  ) {
                        var drpTbl = $(mutation.target).find(".droppabletbl").find("tbody");
                        drpTbl.attr("ondrop", "drop_handler(event);"); 
                        drpTbl.attr("ondragover", "dragover_handler(event)");
                    }

                }
                else if (mutation.type == 'attributes') {
                    console.log('The ' + mutation.attributeName + ' attribute was modified.');
                }
                else {
                    console.log('A subtree node has been added or removed.'+ mutation.target);
                }
            }
        };

        // Create an observer instance linked to the callback function
        var observer = new MutationObserver(callback);

        // Start observing the target node for configured mutations
        observer.observe(targetNode, config);
    });    
    
</script>

</body>
</html>
